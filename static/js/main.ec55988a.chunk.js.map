{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","api.ts","components/FindMovie/FindMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","_ref","movie","_jsxs","className","children","_jsx","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","API_URL","concat","FindMovie","addMovie","_useState","useState","_useState2","_slicedToArray","query","setQuery","_useState3","_useState4","error","setError","_useState5","_useState6","loading","setLoading","_useState7","_useState8","prediction","setPrediction","_Fragment","onSubmit","event","preventDefault","fetch","then","res","json","catch","Response","Error","getMovie","response","Title","Plot","Poster","imdbID","finally","htmlFor","type","id","placeholder","cn","value","onChange","target","disabled","onClick","undefined","App","setMovies","findIndex","item","prevState","_toConsumableArray","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ec55988a.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movieCard\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          data-cy=\"moviePoster\"\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\" data-cy=\"movieTitle\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\" data-cy=\"movieDescription\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl} data-cy=\"movieURL\">\n          IMDB\n        </a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ReponseError';\n\nconst API_KEY = '3e733f7d';\nconst API_URL = `https://www.omdbapi.com/?apikey=${API_KEY}`;\n\nexport function getMovie(query: string): Promise<MovieData | ResponseError> {\n  return fetch(`${API_URL}&t=${query}`)\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n","import React, { useState } from 'react';\nimport './FindMovie.scss';\nimport cn from 'classnames';\n\nimport { getMovie } from '../../api';\nimport { Movie } from '../../types/Movie';\nimport { MovieCard } from '../MovieCard';\n\ninterface Props {\n  addMovie: (prediction: Movie) => void;\n}\n\nexport const FindMovie: React.FC<Props> = ({\n  addMovie,\n}) => {\n  const [query, setQuery] = useState('');\n  const [error, setError] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [prediction, setPrediction] = useState<Movie>();\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setError(false);\n    setQuery(event.target.value);\n  };\n\n  const handleFindMovie = (event: React.FormEvent<HTMLFormElement>) => {\n    event?.preventDefault();\n    setLoading(true);\n\n    getMovie(query)\n      .then((response) => {\n        if ('Error' in response) {\n          setError(true);\n        } else {\n          const {\n            Title: title,\n            Plot: description,\n            Poster: imgUrl,\n            imdbID: imdbId,\n          } = response;\n          const imdbUrl = `https://www.imdb.com/title/${response.imdbID}`;\n\n          setPrediction({\n            title,\n            description,\n            imgUrl: imgUrl === 'N/A'\n              ? 'https://via.placeholder.com/360x270.png?text=no%20preview'\n              : imgUrl,\n            imdbUrl,\n            imdbId,\n          });\n        }\n      }).finally(() => {\n        setLoading(false);\n        setQuery('');\n      });\n  };\n\n  const addMovieHandler = () => {\n    if (prediction) {\n      addMovie(prediction);\n\n      setPrediction(undefined);\n    }\n  };\n\n  return (\n    <>\n      <form className=\"find-movie\" onSubmit={handleFindMovie}>\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className={cn('input', {\n                'is-danger': error,\n              })}\n              value={query}\n              onChange={handleInputChange}\n            />\n          </div>\n\n          {error && (\n            <p className=\"help is-danger\" data-cy=\"errorMessage\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              data-cy=\"searchButton\"\n              type=\"submit\"\n              className={cn('button is-light', {\n                'is-loading': loading,\n              })}\n              disabled={!query}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          <div className=\"control\">\n            {!!prediction && (\n              <button\n                data-cy=\"addButton\"\n                type=\"button\"\n                className=\"button is-primary\"\n                onClick={addMovieHandler}\n              >\n                Add to the list\n              </button>\n            )}\n          </div>\n        </div>\n      </form>\n\n      {!!prediction && (\n        <div className=\"container\" data-cy=\"previewContainer\">\n          <h2 className=\"title\">Preview</h2>\n          <MovieCard movie={prediction} />\n        </div>\n      )}\n\n    </>\n  );\n};\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie\n          addMovie={(prediction: Movie) => {\n            const alreadyInList = movies.findIndex(item => {\n              return item.title === prediction.title;\n            });\n\n            if (alreadyInList) {\n              setMovies((prevState) => [\n                ...prevState,\n                prediction,\n              ]);\n            }\n          }}\n        />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}